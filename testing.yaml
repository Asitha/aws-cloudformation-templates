AWSTemplateFormatVersion: 2010-09-09

Parameters: 
  WUMUserName: 
    Type: String
    Default: ""
    Description: Enter WUM user name
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Enter WUM user password to get the updated WSO2 products deployed. If not provided standard released pack will be deployed
  EC2KeyPair:
    Description: This is used to ssh to the node. If you don't have a key, please create one from AWS console and rerun the script
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: EC2 instance type [t2.micro is the free tier]
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceUserName:
    Type: String
    Default: ubuntu
    Description: Username of the EC2 instance user.
  UseRDS:
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No
    ConstraintDescription: Must specify whether to use an external RDS instance or not
    Description: Use RDS instance as an external DB for the nodes.

Conditions:
  CreateRDSResource: !Equals [ !Ref UseRDS, Yes ]
Resources:
  ##############################
  # Create VPC and subnets
  ##############################
  EIEnvVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: ei-vpc
  EIEnvPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      VpcId: !Ref EIEnvVPC
      Tags:
        - Key: Name
          Value: ei-private-subnet-1
  EIEnvPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      VpcId: !Ref EIEnvVPC
      Tags:
        - Key: Name
          Value: ei-public-subnet-1
  EIEnvPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      VpcId: !Ref EIEnvVPC
      Tags:
        - Key: Name
          Value: ei-public-subnet-2
  EIEnvInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  EIEnvDHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainNameServers:
        - AmazonProvidedDNS
  EIEnvNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref EIEnvVPC
  EIEnvPublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EIEnvVPC
  EIEnvRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EIEnvVPC
  EIEnvBastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt EIEnvBastionEIP.AllocationId
      InstanceId: !Ref EIEnvBastionNode

  ################################
  # Create network configurations
  ################################
  EIEnvNATGateway:
    DependsOn: gw1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIEnvEIP1.AllocationId
      SubnetId: !Ref EIEnvPublicSubnet1
      Tags:
        - Key: Name
          Value: EIEnvNatGateway
  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref EIEnvNetworkAcl
  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref EIEnvNetworkAcl
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref EIEnvNetworkAcl
      SubnetId: !Ref EIEnvPrivateSubnet1
  subnetacl2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref EIEnvNetworkAcl
      SubnetId: !Ref EIEnvPublicSubnet1
  gw1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref EIEnvVPC
      InternetGatewayId: !Ref EIEnvInternetGateway
  subnetroute1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref EIEnvPublicRouteTable1
      SubnetId: !Ref EIEnvPublicSubnet1

  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref EIEnvRouteTable2
      SubnetId: !Ref EIEnvPrivateSubnet1
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref EIEnvPublicRouteTable1
      GatewayId: !Ref EIEnvInternetGateway
    DependsOn: gw1
  route2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref EIEnvRouteTable2
      NatGatewayId: !Ref EIEnvNATGateway
  dchpassoc1:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref EIEnvVPC
      DhcpOptionsId: !Ref EIEnvDHCPOptions

  #########################
  # Create security groups
  #########################
  EIEnvInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for EI EC2 compute instances
      VpcId: !Ref EIEnvVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  EIEnvLBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for EI EC2 compute instances
      VpcId: !Ref EIEnvVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9763
        ToPort: 9763
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

  ###########################
  # Create Elastic IPs
  ###########################
  EIEnvBastionEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  EIEnvEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  #######################
  # EC2 Compute instances
  #######################
  EIEnvBastionNode:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-cd0f5cb6
      InstanceType: t2.micro
      KeyName: !Ref EC2KeyPair
      Monitoring: 'false'
#      UserData:
#        Fn::Base64:
#          !Sub |
#            #!/bin/bash -xe
#            cd /home/ubuntu/
#            git clone https://github.com/Asitha/aws-cloudformation-templates.git --depth 1
#            chown -R ubuntu aws-cloudformation-templates
#            cd aws-cloudformation-templates
#            chmod +x ./setup-instance-env.sh
#            chmod +x ./setup-ei6.1.1.sh
#            sh ./setup-instance-env.sh ubuntu ${WUMUserName} ${WUMPassword} &> /home/ubuntu/setup-instance-env.out
#            sh ./setup-ei6.1.1.sh &> /home/ubuntu/setup-ei611-env.out
      Tags:
        - Key: Name
          Value: ei-bastion-node
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref EIEnvPublicSubnet1
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.0.70
              Primary: 'true'
          GroupSet:
            - !Ref EIEnvInstanceSecurityGroup
  EIEnvMainInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-cd0f5cb6
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyPair
      Monitoring: 'false'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            cd /home/ubuntu/
            git clone https://github.com/Asitha/aws-cloudformation-templates.git --depth 1
            chown -R ubuntu aws-cloudformation-templates
            cd aws-cloudformation-templates
            chmod +x ./setup-instance-env.sh
            chmod +x ./setup-ei6.1.1.sh
            bash ./setup-instance-env.sh ${InstanceUserName} ${WUMUserName} ${WUMPassword} &> /home/ubuntu/setup-instance-env.out
            bash ./setup-ei6.1.1.sh ${InstanceUserName} local  &> /home/ubuntu/setup-ei-env.out
      Tags:
        - Key: Name
          Value: ei-instance1
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref EIEnvPrivateSubnet1
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.1.71
              Primary: 'true'
          GroupSet:
            - !Ref EIEnvInstanceSecurityGroup

  ########################
  # Create Load Balancers
  ########################
  EIEnvAxis28280ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EIEnvAxis28280LBTargetGroup
      LoadBalancerArn: !Ref EIEnvAxis28280ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
  EIEnvAxis28280ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref EIEnvPublicSubnet1
        - !Ref EIEnvPublicSubnet2
      SecurityGroups:
        - !Ref EIEnvLBSecurityGroup
  EIEnvAxis28280LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      HealthCheckPath: /services/Version
      HealthCheckPort: 8280
      Matcher:
        HttpCode: 200
      Name: ei-axis2-8280
      Port: 8280
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EIEnvMainInstance
        Port: 8280
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: EIEnvVPC
      Tags:
      - Key: Name
        Value: ei-axis2-8280

#####################################
# Print details of the created stack 
#####################################       
Description: Creates a VPC with two subnets for EI
Outputs:
  BastionEIP:
    Value: !Sub '${EIEnvBastionNode.PublicIp}'
    Description: Elastic IP for the Bastion node
  EIELB:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - EIEnvAxis28280ApplicationLoadBalancer
          - DNSName
